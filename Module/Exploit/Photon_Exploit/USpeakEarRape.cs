using Trinity.Utilities;
using Trinity.SDK;
using Trinity.SDK.Photon;
using MelonLoader;
using System;
using System.Collections;
using UnityEngine;

namespace Trinity.Module.Exploit
{
    public class USpeakEarRape : BaseModule
    {
        public USpeakEarRape() : base("Ear Rape", "Uspeak Ear Rape Exploit", Main.Instance.Eventexploitbutton, null, true,false) { }

        public override void OnEnable()
        {
            try
            {
                MenuUI.Log("EXPLOITS: <color=green>Starting Ear Rape</color>");
                MelonCoroutines.Start(RapeThyEars());
            }
            catch (Exception Error)
            {
                if (Error.Message.Contains("Value cannot be null"))
                {
                    LogHandler.Log(LogHandler.Colors.Red, "Unauthorized Request('Failed Authentication.'): Logout & Relaunch VRChat. ", true, false);
                }
                else
                {
                    LogHandler.Log(LogHandler.Colors.Red, Error.Message, true, false);
                }

            }

        }

        public IEnumerator RapeThyEars()
        {
            while (this.toggled)
            {
                byte[] VoiceData = Convert.FromBase64String(SDK.Security.SecurityCheck.ExploitData.EarrapeData); 
                byte[] nulldata = new byte[4];
                byte[] ServerTime = BitConverter.GetBytes(VRC.SDKBase.Networking.GetServerTimeInMilliseconds());
                Buffer.BlockCopy(nulldata, 0, VoiceData, 0, 4);
                Buffer.BlockCopy(ServerTime, 0, VoiceData, 4, 4);
                for (int i = 0; i < 80; i++)
                {
                    PhotonExtensions.OpRaiseEvent(1, VoiceData, new Photon.Realtime.RaiseEventOptions() { field_Public_ReceiverGroup_0 = Photon.Realtime.ReceiverGroup.Others, field_Public_EventCaching_0 = Photon.Realtime.EventCaching.DoNotCache }, default);
                }
                yield return new WaitForSecondsRealtime(0.1f);
            }
            yield break;
        }
    }
}
